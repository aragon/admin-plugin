interface IPlugin {
  id: ID! # Plugin address
  daoAddress: Bytes!
  pluginAddress: Bytes!
}

type AdminPlugin implements IPlugin @entity {
  id: ID! # Plugin address
  daoAddress: Bytes!
  pluginAddress: Bytes!
  proposals: [AdminProposal!]! @derivedFrom(field: "plugin")
  administrators: [AdministratorAdminPlugin!]! @derivedFrom(field: "plugin")
}

type Administrator @entity(immutable: true) {
  id: ID! # Administrator address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [AdminProposal!]! @derivedFrom(field: "administrator")
  plugins: [AdministratorAdminPlugin!]! @derivedFrom(field: "administrator")
}

type AdministratorAdminPlugin @entity {
  "for Many-to-Many"
  id: ID! # Plugin address + Administrator address
  administrator: Administrator!
  plugin: AdminPlugin!
}

interface IProposal {
  id: ID! # Plugin address + Plugin proposal ID
  daoAddress: Bytes!
  creator: Bytes!
  metadata: String
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  executionTxHash: Bytes
}

type AdminProposal implements IProposal @entity {
  id: ID! # Plugin address + Plugin proposal ID
  daoAddress: Bytes!
  creator: Bytes! # Administrator address
  metadata: String
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  plugin: AdminPlugin!
  pluginProposalId: BigInt!
  administrator: Administrator!
  executionTxHash: Bytes
}

interface IAction {
  id: ID! # Plugin address + DAO address + Plugin proposal ID + Action index
  to: Bytes!
  value: BigInt!
  data: Bytes!
  daoAddress: Bytes!
}

type Action implements IAction @entity(immutable: true) {
  id: ID! # Plugin address + DAO address + Plugin proposal ID + Action index
  to: Bytes!
  value: BigInt!
  data: Bytes!
  daoAddress: Bytes!

  # proposal data
  proposal: IProposal!
}
